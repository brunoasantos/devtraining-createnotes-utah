<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $rootScope) {
  /* widget controller */
  var c = this;
  // Cria uma referência para o contexto do controlador.

  $rootScope.$on('selectNote', function(event, data) {
    // Cria um ouvinte para o evento 'selectNote' no $rootScope.

    c.server.get({
      action: 'getNote',
      noteID: $rootScope.noteID
    }).then(function(r) {
      // Faz uma chamada de API usando o objeto 'server' para obter os detalhes da nota com base no 'noteID' no $rootScope.

      c.data.title = r.data.note.title;
      // Atualiza o título da nota no objeto 'data' do controlador com o título obtido na resposta da API.

      c.data.note = r.data.note.note;
      // Atualiza o corpo da nota no objeto 'data' do controlador com o corpo obtido na resposta da API.

      c.data.noteID = r.data.note.sys_id;
      // Atualiza o 'noteID' da nota no objeto 'data' do controlador com o 'noteID' obtido na resposta da API.
    });
  });

  c.updateNote = function(updateType) {
    // Define uma função chamada 'updateNote' no objeto do controlador.

    c.server.get({
      action: 'updateNote',
      noteID: c.data.noteID,
      noteBody: c.data.note,
      noteTitle: c.data.title
    }).then(function(r) {
      // Faz uma chamada de API usando o objeto 'server' para atualizar a nota com os dados do objeto 'data' do controlador.

      // O corpo da função está vazio, pois não há ações adicionais sendo executadas após a atualização da nota.
    });
  };
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>notes_body</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Notas Corpo</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  // IIFE (Função Imediatamente Invocada) - Isso isola o código e evita conflitos de escopo.

  if (input && input.noteID) {
    // Verifica se a variável 'input' existe e se 'input.noteID' tem um valor válido.

    var note = new GlideRecord('x_snc_createnotes_note');
    // Cria uma nova instância do objeto GlideRecord para a tabela 'x_snc_createnotes_note'.

    if (note.get(input.noteID)) {
      // Tenta obter um registro da tabela 'x_snc_createnotes_note' com o 'noteID' fornecido.

      if (input.action == 'getNote') {
        // Verifica se a propriedade 'action' de 'input' é igual a 'getNote'.

        data.note = {};
        // Inicializa uma propriedade 'note' no objeto 'data' para armazenar os detalhes da nota.

        $sp.getRecordValues(data.note, note, "title, note, sys_id");
        // Copia os valores dos campos "title", "note" e "sys_id" do registro 'note' para o objeto 'data.note'.
        // A função '$sp.getRecordValues' é do Service Portal do ServiceNow.
      }
      else if (input.action == 'updateNote') {
        // Verifica se a propriedade 'action' de 'input' é igual a 'updateNote'.

        note.title = input.noteTitle;
        // Atualiza o título da nota no registro 'note' com o valor fornecido em 'input.noteTitle'.

        note.note = input.noteBody;
        // Atualiza o corpo da nota no registro 'note' com o valor fornecido em 'input.noteBody'.

        note.update();
        // Salva as alterações feitas no registro 'note' no banco de dados.
      }
    }
  }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>aires</sys_created_by>
        <sys_created_on>2023-07-11 22:56:21</sys_created_on>
        <sys_id>edf2142847483110310a23dbd36d43cc</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>Notas Corpo</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_edf2142847483110310a23dbd36d43cc</sys_update_name>
        <sys_updated_by>aires</sys_updated_by>
        <sys_updated_on>2023-07-25 20:13:14</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default" ng-show="c.data.noteID">
  <!-- Painel (panel) com classe CSS "panel-default" que será mostrado com base na propriedade "noteID" no objeto "data" do controlador. -->

  <div class="panel-heading clearfix">
    <!-- Cabeçalho (header) do painel. -->

    <div class="row">
      <!-- Linha (row) para criar um layout responsivo com colunas. -->

      <div class="col-md-12">
        <!-- Coluna (col-md-12) que ocupa a largura total em dispositivos médios e acima. -->

        <input class="form-control" id="note-title" ng-model="c.data.title" ng-change="c.updateNote('title')" ng-model-options="{debounce: 1000}"/>
        <!-- Campo de entrada (input) do tipo texto com classe CSS "form-control". 
             O atributo "id" é definido como "note-title".
             O valor do campo de entrada é vinculado à propriedade "title" no objeto "data" do controlador usando a diretiva "ng-model".
             A função "c.updateNote('title')" será chamada sempre que o valor do campo for alterado usando a diretiva "ng-change". 
             A diretiva "ng-model-options" define opções de vinculação, como um atraso de 1000ms (1 segundo) antes de atualizar o modelo. -->
      </div>
    </div>
  </div>

  <div class="panel-body">
    <!-- Corpo (body) do painel. -->

    <textarea class="form-control" id="note-body" ng-model="c.data.note" ng-change="c.updateNote('body')" ng-model-options="{debounce: 1000}"></textarea>
    <!-- Campo de texto (textarea) com classe CSS "form-control".
         O atributo "id" é definido como "note-body".
         O valor do campo de texto é vinculado à propriedade "note" no objeto "data" do controlador usando a diretiva "ng-model".
         A função "c.updateNote('body')" será chamada sempre que o valor do campo for alterado usando a diretiva "ng-change".
         A diretiva "ng-model-options" define opções de vinculação, como um atraso de 1000ms (1 segundo) antes de atualizar o modelo. -->
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
